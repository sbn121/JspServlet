/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-05-22 03:38:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Ex01_005fRequest;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Ex04_005fScope_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>스코프(데이터 전달 범위)</h1>\r\n");
      out.write("	<p>데이터를 전달하는 범위가 각각의 스코프(비율, 배율)마다 차이가 있음</p>\r\n");
      out.write("	<p>많은 데이터를 사용하지 않음. 계속 전달을 하면 메모리에 기억을 해두고 유지를 해야함</p>\r\n");
      out.write("	<p>많은 데이터를 사용하는 경우, 계속 메모리에 누적시켜두면 홈페이지 자체가 느려짐 ex) employees의 모든 내용.</p>\r\n");
      out.write("	<p>PageContext(JSP 페이지 내부에서만 데이터를 전달하는 목적으로 사용되는 객체. (사용빈도가 매우 낮음))</p>\r\n");
      out.write("	<p>※ Request ※(요청이 들어왔을 때, Forward(페이지 요청)시에 딱 한 번만 데이터를 유지함. URL->Servlet, Servlet->URL)</p>\r\n");
      out.write("	<p>※ Session ※(브라우저 내에서는 계속해서 유지되는 정보, 주로 로그인 정보나 상태 정보 등으로 건수가 많은 데이터가 아닌 경우)</p>\r\n");
      out.write("	<p>ApplicationContext(어플리케이션이 완전히 종료되지 않는 한 계속해서 유지됨 -> 버전 정보, 특정한 업데이트를 위한 값 외에는 저장x)</p>\r\n");
      out.write("	");

		pageContext.setAttribute("pageCtx", "SBN_PAGE_CTX");//페이지 내에서만 사용하는 객체
		request.setAttribute("req", "SBN_REQ");
		//Request => 1. getParameter (URL 또는 FORM 태그를 이용한 경우 내부 태그를 name으로 구분하여 파라메터가 String으로 들어있음)
		//	      => 2. Attribute <= 어떤 요청으로 통해서 오거나 Reqeust가 Forward라는 기능으로 페이지 전환을 하는 경우 Object 들어있음
		session.setAttribute("session", "SBN_SESSION");
		application.setAttribute("app", "SBN_APPV1.1");
	
      out.write("\r\n");
      out.write("	<p>PageContext : ");
      out.print(pageContext.getAttribute("pageCtx"));
      out.write("\r\n");
      out.write("	<p>PageContext : ");
      out.print(request.getAttribute("req"));
      out.write("\r\n");
      out.write("	<p>PageContext : ");
      out.print(session.getAttribute("session"));
      out.write("\r\n");
      out.write("	<p>PageContext : ");
      out.print(application.getAttribute("app"));
      out.write('\r');
      out.write('\n');
      out.write('	');
      if (true) {
        _jspx_page_context.forward("Ex04_ScopeResult.jsp");
        return;
      }
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<!-- <a href=\"Ex04_ScopeResult.jsp\">다음 페이지로 이동 ScopeResult</a> -->\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
