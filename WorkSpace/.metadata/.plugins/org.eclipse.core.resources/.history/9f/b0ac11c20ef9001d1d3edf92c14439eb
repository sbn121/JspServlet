package Controller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

// 어떤글자.js <-로 끝나는 모든 것들을 요청받게. => *.js
@WebServlet("*.js")
public class JstlController extends HttpServlet {
	// doGet, doPost <= Spring에서는 default로 두 가지가 합쳐진 버전의 메소드를 활용을 한다.
	// service (get, post의 모든 요청을 받는 메소드)
	RequestDispatcher rd;
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println(req.getServletPath());
		//RequestDispacter <= req객체가 요청을 받고나서 다시 새로운 페이지로 요청을 넘겨야할때.(Forward)사용
		//페이지를 보여줄지말지를 요청 온 Mapping 기준으로 분기 => list.js
		if(req.getServletPath().equals("/list.js")) {
			req.setAttribute("key1", "값1");//forward로 요청을 넘길 때는 setAttribute를 통해 데이터 전달.
			req.setAttribute("key2", "값2");//forward로 요청을 넘길 때는 setAttribute를 통해 데이터 전달.
			req.setAttribute("key3", "값3");//forward로 요청을 넘길 때는 setAttribute를 통해 데이터 전달.
			req.setAttribute("key4", "값4");//forward로 요청을 넘길 때는 setAttribute를 통해 데이터 전달.
			req.setAttribute("key5", "값5");//forward로 요청을 넘길 때는 setAttribute를 통해 데이터 전달.
			req.setAttribute("key6", "값6");//forward로 요청을 넘길 때는 setAttribute를 통해 데이터 전달.
			rd = req.getRequestDispatcher("jstl/list.jsp"); //jsp, html페이지 경로를 써주는 것
			//Model(MVC M) : DAO DTO를 다음페이지로 넘겨주고 요청을 맡긴다.
		}else if(req.getServletPath().equals("/list2.js")){
			rd = req.getRequestDispatcher("jstl/listdetail.jsp")
		}else {
			rd = req.getRequestDispatcher("error/list.jsp");//나중에 추가예정SBN(20230523)->20230526
		}
		rd.forward(req, resp); //jsp페이지로 모든 정보를 넘기고 처리를 떠맡긴다.
		
	}
	

}
